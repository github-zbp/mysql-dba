1.如何设计无限级分类

以评论表comments为例

反面教材:
字段设计为: 
id  parent_id   content
1   0           xxx
2   0           xxx
3   1           xxx
4   2           xxx
5   2           xxx
6   3           xxx 

parent_id为1表示,该评论是id为1的评论的回复

如果采用这样的结构，当一篇帖子回复讨论的内容很多的时候，就需要编写复杂的代码递归检索很多记录，查询的效率就会很低。如果数据量不大、讨论内容相对固定，数据的层次较少，那么采用这样的结构就会是简单的、清晰的，这种情况下此结构还是合适的；但如果数据量很大，查询就会变得很复杂。下面介绍两种更通用，扩展性更好的解决方案：路径枚举和闭包表


正面例子:

(1) 路径枚举
id  parent_id   path    content
1   0           1/        xxx
2   0           2/        xxx
3   1           1/3        xxx
4   2           2/4        xxx
5   2           2/5        xxx
6   3           3/6        xxx 


可以增加一个字段path，用于记录节点的所有祖先信息。记录的方式是把所有的祖先信息组织 成一个字符串。

例如查找comment_id等于3的所有后代，可以使用如下的查询语句。
SELECT * FROM comments WHERE path LIKE ‘ 1/3/%’ ;

如果要查找下一层子节点，可以使用如下的查询语句 
SELECT * FROM comments WHERE path REGEXP “^1/3/[0-9]+/$” ;


(2) 闭包表

闭包表也是一种通用的方案，它需要额外增加一张表，用于记录节点之间的关系。它不仅记录了节点之间的父子关系，也记录了树中所有节点之间的关系

使用如下命令语句新建表path 
CREATE TABLE path ( 
    ancestor int(11) NOT NULL,
    descendant int(11) NOT NULL, 
    PRIMARY KEY (ancestor,descendant) 
) ENGINE=InnoDB DEFAULT CHARSET=utf8

ancestor表示祖先，descendant表示后代，存储的是comment_id值。

比如，如果要统计comment_id等于3的所有后代（不包括其自身），可以直接搜索path表祖先是3的记录即可得到，搜索语句如下。 
SELECT COUNT(*) FROM path WHERE ancestor=3 AND descendant <> 3; 

为了更方便地查询直接父节点/子节点，可以增加一个path_length字段以表示深度，节点的自我引用path_length等于0，到它 的直接子节点的path_length等于1，再下一层为2，以此类推

新增了一个表，用于存储节点之间的信息，是一种典型的“以空间换时间”的方案，而且一个节点可以属于多棵树。相对于路径枚举，闭包表的节点关系更容易维护。



2.如何将一张gbk字符集的表转为一张utf8的表

首先我们要知道,一张表原有的数据的字符集如果是gbk,在改变表的字符集为utf8之后,原有的数据其实还是gbk格式的,但新增的数据会是utf8的

如果想将原有的数据也变为utf8的话,可以先用mysqldump导出为sql文件,然后用notepad++ 将其转为utf8编码。

然后新建一个库，这个库是utf8编码的，再将这个表导入这个库即可。



3.处理重复值
一般我处理重复值的方式如下：

如果一个字段不允许出现重复值，我会想将其设为unique 唯一键，假如这个字段是title

在插入数据的时候我会做判定，如果重复了那么就忽略插入操作，如下：
insert into arts (id,title,content,author) values (null,"标题","内容","作者") on duplicate update id=id;  # 如果有重复则修改id为原id,即不做变动

或者

insert ignore into arts (id,title,content,author) values (null,"标题","内容","作者");   # 如果有重复则忽略该条插入


如果将一个表的数据复制到另一个表,而这个表本身里面就有数据了,为了避免id冲突也可以
INSERT IGNORE INTO `table_1` (`name`) SELECT `name` FROM `table_2`;


4.关于历史数据归档
如果一个表的数据量庞大,但是里面有很多不经常用到的数据,可以将这些数据归档存到另一个表或者另一个库里面,这样使得原来的表更快的插入和查询数据。

