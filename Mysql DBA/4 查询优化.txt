查询优化的常用策略

一般常用的查询优化策略有优化数据访问、重写SQL、重新设计表、添加索引4种。

（1）优化数据访问 
应该尽量减少对数据的访问。一般有如下两个需要考虑的地方：应用程序应减少对数据库的数据访问，数据库应减少实际 扫描的记录数。 例如，如果应用程序可以缓存数据，就可以不需要从数据库中直接读取数据。

（2）重写SQL
由于复杂查询严重降低了并发性，因此为了让程序更适于扩展，我们可以把复杂的查询分解为多个简单的查询。一般来说 多个简单查询的总成本是小于一个复杂查询的。

（3）重新设计库表
有些情况下，我们即使是重写SQL或添加索引也是解决不了问题的，这个时候可能要考虑更改表结构的设计。比如，可以 增加一个缓存表，暂存统计数据，或者可以增加冗余列，以减少连接。

（4）添加索引 生产环境中的性能问题，可能80%的都是索引的问题，所以优化好索引，就已经有了一个好的开始。



各种语句优化

连接的优化

在数据量比较小的时候，连接的开销不大，这个时候一般不会有性能问 题，但当数据量变大之后，连接的低效率问题就暴露出来了，成为整个系统的瓶颈所在。

对于一些复杂的连接查询，更值得推荐的做法是将它分解为几个简单的查询，可以先执行查询以获得一个较小的结果集， 然后再遍历此结果集，最后根据一定的条件去获取完整的数据，这样做往往是更高效的，因为我们把数据分离了，更不容易发 生变化，更方便缓存数据，数据也可以按照设计的需要从缓存或数据库中进行获取。


GROUP BY、DISTINCT、ORDER BY语句优化

尽量对较少的行进行排序。 
如果连接了多张表，ORDERBY的列应该属于连接顺序的第一张表。
利用索引排序，如果不能利用索引排序，那么EXPLAIN查询语句将会看到有filesort。 
GROUP BY、ORDERBY语句参考的列应该尽量在一个表中，如果不在同一个表中，那么可以考虑冗余一些列，或者合并表

需要保证索引列和ORDERBY的列相同，且各列均按相同的方向进行排序。 


优化子查询

在绝大部分情况下，连接会比子查询更快。使用连接的方式，MySQL优化器一般可以生成更佳的执行计 划，可以预先装载数据，更高效地处理查询。而子查询往往需要运行重复的查询
子查询生成的临时表上也没有索引，因此效 率会更低。

对text类型的优化
像文章表,如果表里面有很多很多的文章,不建议将text类型的文章内容放在和id,标题,分类这样的信息的同一个表内,而是分表单独将内容放到一个表中。


临时表：
如果不能利用索引排序，那么我们在MySQL中可能需要创建一个临时表用于排序。MySQL的临时表分为“内存临时 表”和“磁盘临时表”，其中，内存临时表使用MySQL的MEMORY存储引擎。磁盘临时表使用MySQL的MyISAM存储引擎；一般 情况下，MySQL会先创建内存临时表，但当内存临时表超过配置参数指定的值后，MySQL会将内存临时表导出到磁盘临时 表。

触发以下条件，会创建临时表。

ORDERBY子句和GROUP BY子句引用的列不一样。 
在连接查询中，ORDERBY或GROUP BY使用的列不是连接顺序中的第一个表。 
ORDERBY中使用了DISTINCT关键字。

 通过EXPLAIN的Extra列可以查看是否用到了临时表：“Using temporary”表示使用了临时表。
 
 
 如果查询创建了临时表（in-memory table）来排序或检索结果集，分配的内存大于tmp_table_size与max_heap_table_size参数之 间的最小值，那么内存临时表就会转换为磁盘临时表（on-disk table），MySQL会在磁盘上创建磁盘临时表，这样会可能导致 I/O瓶颈，进而影响性能